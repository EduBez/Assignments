#include <algorithm>
#include <iostream>
#include <iterator>
#include <fstream>
#include <random>
#include <string>
#include <unordered_set>

using namespace std;

//
//  Windows 10
//  Visual C++ version 19.21.27702.2
//
//  RAM usage                : 2.2GB
//  Number of Generated URLs : 10 Million
//  % of URL duplication     : 0,0064408
//

//
//  Main Entry Point
//
int main()
{
    // Valid characters composing the shorter url
    const string alfanum = "abcdefghijklmnaoqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";

    // Size of the shorter url
    int urlLength = 5;

    // Output file for use with SQL Server 'BCP' utility
    ofstream bcp{R"(R:\DevOps\Loadsmart\Database\Bcp\RandomChars.bcp)"};

    // Uniformly-distributed integer random number generator
    random_device rnd; // Produces non-deterministic random numbers

    // Random number engine based on 'Mersenne Twister' algorithm
    mt19937 gen{rnd()};

    // Produces random integer values, uniformly distributed
    uniform_int_distribution<size_t> dist{0, alfanum.length() - 1};

    unordered_set<string> coll{};
    int dups{0};

    // Size of the shorter url pool
    size_t urlPool = 10'000'000;

    while (coll.size() < urlPool)
    {
        string value{};

        // Assigns values generated by the given lambda
        generate_n(back_inserter(value), urlLength, [&](){return alfanum[dist(gen)];});
        
        // Try to insert the generated value
        auto [it, inserted] = coll.insert(value);

        // Check if generated value was inserted
        if (inserted) {
            // Write generated value to file
            bcp << *it << '\n';
        }
        else
        {
            // Increment duplicate values counter
            dups += 1;
            // Show duplicated value
            cout << "Duplicates #: " << dups << '\n';
        }
    }

    // Pause to read results
    getchar();

    return 0;
}
